import { appendResponseHeader, getRequestIP, getResponseHeader, getResponseHeaders, getResponseStatus, getResponseStatusText, getWebRequest, removeResponseHeader, setResponseHeader, setResponseStatus } from "vinxi/http";
const fetchEventSymbol = Symbol("fetchEvent");
export function createFetchEvent(event) {
    return {
        request: getWebRequest(event),
        response: createResponseStub(event),
        clientAddress: getRequestIP(event),
        locals: {},
        nativeEvent: event
    };
}
export function cloneEvent(fetchEvent) {
    return {
        ...fetchEvent
    };
}
export function getFetchEvent(h3Event) {
    if (!h3Event[fetchEventSymbol]) {
        const fetchEvent = createFetchEvent(h3Event);
        h3Event[fetchEventSymbol] = fetchEvent;
    }
    return h3Event[fetchEventSymbol];
}
export function mergeResponseHeaders(h3Event, headers) {
    for (const [key, value] of headers.entries()) {
        appendResponseHeader(h3Event, key, value);
    }
}
class HeaderProxy {
    event;
    constructor(event) {
        this.event = event;
    }
    get(key) {
        const h = getResponseHeader(this.event, key);
        return Array.isArray(h) ? h.join(", ") : h || null;
    }
    has(key) {
        return this.get(key) !== undefined;
    }
    set(key, value) {
        return setResponseHeader(this.event, key, value);
    }
    delete(key) {
        return removeResponseHeader(this.event, key);
    }
    append(key, value) {
        appendResponseHeader(this.event, key, value);
    }
    getSetCookie() {
        const cookies = getResponseHeader(this.event, "Set-Cookie");
        return Array.isArray(cookies) ? cookies : [cookies];
    }
    forEach(fn) {
        return Object.entries(getResponseHeaders(this.event)).forEach(([key, value]) => fn(Array.isArray(value) ? value.join(", ") : value, key, this));
    }
    entries() {
        return Object.entries(getResponseHeaders(this.event))
            .map(([key, value]) => [key, Array.isArray(value) ? value.join(", ") : value])[Symbol.iterator]();
    }
    keys() {
        return Object.keys(getResponseHeaders(this.event))[Symbol.iterator]();
    }
    values() {
        return Object.values(getResponseHeaders(this.event))
            .map(value => (Array.isArray(value) ? value.join(", ") : value))[Symbol.iterator]();
    }
    [Symbol.iterator]() {
        return this.entries()[Symbol.iterator]();
    }
}
function createResponseStub(event) {
    return {
        get status() {
            return getResponseStatus(event);
        },
        set status(v) {
            setResponseStatus(event, v);
        },
        get statusText() {
            return getResponseStatusText(event);
        },
        set statusText(v) {
            setResponseStatus(event, getResponseStatus(), v);
        },
        headers: new HeaderProxy(event)
    };
}
