import type { FetchEvent } from "../server/types";
/** Function responsible for receiving an observable [operation]{@link Operation} and returning a [result]{@link OperationResult}. */
export type MiddlewareFn = (event: FetchEvent) => Promise<unknown> | unknown;
/** This composes an array of Exchanges into a single ExchangeIO function */
export type RequestMiddleware = (event: FetchEvent) => Response | Promise<Response> | void | Promise<void>;
type EventHandlerResponse<T = any> = T | Promise<T>;
type ResponseMiddlewareResponseParam = {
    body?: Awaited<EventHandlerResponse>;
};
export type ResponseMiddleware = (event: FetchEvent, response: ResponseMiddlewareResponseParam) => Response | Promise<Response> | void | Promise<void>;
export declare function createMiddleware({ onRequest, onBeforeResponse }: {
    onRequest?: RequestMiddleware | RequestMiddleware[] | undefined;
    onBeforeResponse?: ResponseMiddleware | ResponseMiddleware[] | undefined;
}): {
    onRequest?: import("h3")._RequestMiddleware<import("h3").EventHandlerRequest> | import("h3")._RequestMiddleware<import("h3").EventHandlerRequest>[] | undefined;
    onBeforeResponse?: import("h3")._ResponseMiddleware<import("h3").EventHandlerRequest, any> | import("h3")._ResponseMiddleware<import("h3").EventHandlerRequest, any>[] | undefined;
};
export {};
