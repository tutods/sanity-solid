import type { JSX } from 'solid-js';
export interface AutocompleteStateProperties<T> {
    isSelected(value: T): boolean;
    select(value: T): void;
    hasSelected(): boolean;
    isActive(value: T): boolean;
    hasActive(): boolean;
    focus(value: T): void;
    blur(): void;
    disabled(): boolean;
    query(): string;
    setQuery(value: string): void;
    matches(value: T): boolean;
    hasQuery(): boolean;
}
export interface SingleAutocompleteStateControlledOptions<T> {
    multiple?: false;
    toggleable?: boolean;
    value: T;
    matchBy: (value: T, query: string) => boolean;
    onChange?: (value?: T) => void;
    disabled?: boolean;
    by?: (a: T, b: T) => boolean;
}
export interface SingleAutocompleteStateUncontrolledOptions<T> {
    multiple?: false;
    toggleable?: boolean;
    defaultValue: T;
    matchBy: (value: T, query: string) => boolean;
    onChange?: (value?: T) => void;
    disabled?: boolean;
    by?: (a: T, b: T) => boolean;
}
export type SingleAutocompleteStateOptions<T> = SingleAutocompleteStateControlledOptions<T> | SingleAutocompleteStateUncontrolledOptions<T>;
export declare function createSingleAutocompleteState<T>(options: SingleAutocompleteStateOptions<T>): AutocompleteStateProperties<T>;
export interface MultipleAutocompleteStateControlledOptions<T> {
    multiple: true;
    toggleable?: boolean;
    value: T[];
    matchBy: (value: T, query: string) => boolean;
    onChange?: (value: T[]) => void;
    disabled?: boolean;
    by?: (a: T, b: T) => boolean;
}
export interface MultipleAutocompleteStateUncontrolledOptions<T> {
    multiple: true;
    toggleable?: boolean;
    defaultValue: T[];
    matchBy: (value: T, query: string) => boolean;
    onChange?: (value: T[]) => void;
    disabled?: boolean;
    by?: (a: T, b: T) => boolean;
}
export type MultipleAutocompleteStateOptions<T> = MultipleAutocompleteStateControlledOptions<T> | MultipleAutocompleteStateUncontrolledOptions<T>;
export declare function createMultipleAutocompleteState<T>(options: MultipleAutocompleteStateOptions<T>): AutocompleteStateProperties<T>;
export interface AutocompleteStateRenderProps<T> {
    children?: JSX.Element | ((state: AutocompleteStateProperties<T>) => JSX.Element);
}
export interface AutocompleteStateProviderProps<T> extends AutocompleteStateRenderProps<T> {
    state: AutocompleteStateProperties<T>;
}
export declare function AutocompleteStateProvider<T>(props: AutocompleteStateProviderProps<T>): JSX.Element;
export declare function useAutocompleteState<T>(): AutocompleteStateProperties<T>;
export declare function AutocompleteStateChild<T>(props: AutocompleteStateRenderProps<T>): JSX.Element;
//# sourceMappingURL=create-autocomplete-state.d.ts.map