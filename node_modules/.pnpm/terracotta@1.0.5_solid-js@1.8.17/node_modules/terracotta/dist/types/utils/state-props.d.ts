type Booleanish = '' | undefined;
/**
 * ARIA states
 */
interface ARIADisabledProps {
    disabled?: boolean;
    'aria-disabled'?: boolean;
}
export declare function createARIADisabledState(disabled: () => boolean | undefined): ARIADisabledProps;
interface ARIAExpandedProps {
    'aria-expanded'?: boolean;
}
export declare function createARIAExpandedState(expanded: () => boolean | undefined): ARIAExpandedProps;
interface ARIACheckedProps {
    'aria-checked': boolean | 'mixed';
}
export declare function createARIACheckedState(checked: () => boolean | undefined): ARIACheckedProps;
interface ARIASelectedProps {
    'aria-selected': boolean;
}
export declare function createARIASelectedState(selected: () => boolean): ARIASelectedProps;
interface ARIAPressedProps {
    'aria-pressed': boolean;
}
export declare function createARIAPressedState(pressed: () => boolean): ARIAPressedProps;
/**
 * Terracotta States
 */
interface DisabledProps {
    'tc-disabled'?: Booleanish;
}
export declare function createDisabledState(disabled: () => boolean | undefined): DisabledProps;
interface ExpandedProps {
    'tc-expanded'?: Booleanish;
}
export declare function createExpandedState(expanded: () => boolean | undefined): ExpandedProps;
interface CheckedProps {
    'tc-checked': Booleanish | 'mixed';
}
export declare function createCheckedState(isChecked: () => boolean | undefined): CheckedProps;
interface SelectedProps {
    'tc-selected': Booleanish;
}
export declare function createSelectedState(isSelected: () => boolean): SelectedProps;
interface ActiveProps {
    'tc-active': Booleanish;
}
export declare function createActiveState(isActive: () => boolean): ActiveProps;
interface MatchesProps {
    'tc-matches': Booleanish;
}
export declare function createMatchesState(matches: () => boolean): MatchesProps;
interface HasSelectedProps {
    'tc-has-selected': Booleanish;
}
export declare function createHasSelectedState(hasSelected: () => boolean): HasSelectedProps;
interface HasActiveProps {
    'tc-has-active': Booleanish;
}
export declare function createHasActiveState(hasActive: () => boolean): HasActiveProps;
interface HasQueryProps {
    'tc-has-query': Booleanish;
}
export declare function createHasQueryState(hasQuery: () => boolean): HasQueryProps;
interface PressedProps {
    'tc-pressed': Booleanish;
}
export declare function createPressedState(pressed: () => boolean): PressedProps;
export {};
//# sourceMappingURL=state-props.d.ts.map