import { Node, ImportSpecifier, ImportDefaultSpecifier, ImportNamespaceSpecifier, ImportDeclaration, Program } from '@babel/types';
import { Options } from 'recast';

interface CodeFormatOptions {
    tabWidth?: number;
    useTabs?: boolean;
    wrapColumn?: number;
    quote?: "single" | "double";
    trailingComma?: boolean;
    arrayBracketSpacing?: boolean;
    objectCurlySpacing?: boolean;
    arrowParensAlways?: boolean;
    useSemi?: boolean;
}
declare function detectCodeFormat(code: string, userStyles?: CodeFormatOptions): CodeFormatOptions;

interface ProxyBase {
    $ast: Node;
}
type ProxifiedArray<T extends any[] = unknown[]> = {
    [K in keyof T]: Proxified<T[K]>;
} & ProxyBase & {
    $type: "array";
};
type ProxifiedFunctionCall<Args extends any[] = unknown[]> = ProxyBase & {
    $type: "function-call";
    $args: ProxifiedArray<Args>;
    $callee: string;
};
type ProxifiedNewExpression<Args extends any[] = unknown[]> = ProxyBase & {
    $type: "new-expression";
    $args: ProxifiedArray<Args>;
    $callee: string;
};
type ProxifiedObject<T extends object = object> = {
    [K in keyof T]: Proxified<T[K]>;
} & ProxyBase & {
    $type: "object";
};
type ProxifiedIdentifier = ProxyBase & {
    $type: "identifier";
    $name: string;
};
type Proxified<T = any> = T extends number | string | null | undefined | boolean | bigint | symbol ? T : T extends any[] ? {
    [K in keyof T]: Proxified<T[K]>;
} & ProxyBase & {
    $type: "array";
} : T extends object ? ProxyBase & {
    [K in keyof T]: Proxified<T[K]>;
} & {
    $type: "object";
} : T;
type ProxifiedModule<T extends object = Record<string, any>> = ProxyBase & {
    $type: "module";
    $code: string;
    exports: ProxifiedObject<T>;
    imports: ProxifiedImportsMap;
    generate: (options?: GenerateOptions) => {
        code: string;
        map?: any;
    };
};
type ProxifiedImportsMap = Record<string, ProxifiedImportItem> & ProxyBase & {
    $type: "imports";
    $add: (item: ImportItemInput) => void;
    $items: ProxifiedImportItem[];
};
interface ProxifiedImportItem extends ProxyBase {
    $type: "import";
    $ast: ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier;
    $declaration: ImportDeclaration;
    imported: string;
    local: string;
    from: string;
}
interface ImportItemInput {
    local?: string;
    imported: string;
    from: string;
}
type ProxifiedValue = ProxifiedArray | ProxifiedFunctionCall | ProxifiedNewExpression | ProxifiedIdentifier | ProxifiedObject | ProxifiedModule | ProxifiedImportsMap | ProxifiedImportItem;
type ProxyType = ProxifiedValue["$type"];

interface Loc {
    start?: {
        line?: number;
        column?: number;
        token?: number;
    };
    end?: {
        line?: number;
        column?: number;
        token?: number;
    };
    lines?: any;
}
interface Token {
    type: string;
    value: string;
    loc?: Loc;
}
interface ParsedFileNode {
    type: "file";
    program: Program;
    name?: string;
    loc: Loc;
    comments: null | any;
}
type GenerateOptions = Options & {
    format?: false | CodeFormatOptions;
};

export { type CodeFormatOptions as C, type GenerateOptions as G, type ImportItemInput as I, type Loc as L, type ProxifiedModule as P, type Token as T, type Proxified as a, type ParsedFileNode as b, type ProxyBase as c, type ProxifiedArray as d, type ProxifiedFunctionCall as e, type ProxifiedNewExpression as f, type ProxifiedObject as g, type ProxifiedIdentifier as h, type ProxifiedImportsMap as i, type ProxifiedImportItem as j, type ProxifiedValue as k, type ProxyType as l, detectCodeFormat as m };
